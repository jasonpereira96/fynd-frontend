{"version":3,"sources":["components/MainGrid.js","components/ChipsArray.js","components/RowModal.js","components/ErrorHandler.js","components/MainHeader.js","data/constants.js","data/DataSource.js","components/MainScreen.js","utils/utils.js","App.js","serviceWorker.js","index.js"],"names":["GenreFormatter","genres","value","Array","isArray","split","map","genre","index","Chip","label","key","GenreEditor","onValueChange","currentGenres","Set","this","props","Select","input","Input","onChange","event","target","multiple","style","width","renderValue","selected","join","MenuItem","id","name","Checkbox","checked","has","ListItemText","primary","GenreTypeProvider","grid","formatterComponent","bind","editorComponent","chipColumns","MainGrid","state","lastQuery","loading","rows","filters","setLoading","setLastQuery","setFilters","setRows","getCommitChanges","onDataEdit","columns","isAdmin","verified","editingState","tableEditRow","tableEditColumn","title","showAddCommand","showEditCommand","showDeleteCommand","onCommitChanges","getRowId","row","columnExtensions","columnName","editingEnabled","data","className","Paper","for","defaultSorting","direction","wordWrapEnabled","showSortingControls","query","setState","actions","deleted","length","rowNumber","changed","Object","keys","_rowNumber","parseInt","recordId","undefined","changedRows","added","startingAddedId","deletedSet","filter","React","Component","useStyles","makeStyles","theme","root","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","chip","ChipsArray","classes","chipFilters","chipsFilters","component","chipFilter","onClick","console","log","chipClicked","color","applied","getModalStyle","top","left","transform","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","SimpleModal","useState","modalStyle","open","setOpen","setSelected","nameFieldRef","createRef","directorFieldRef","imdbFieldRef","popularityFieldRef","selectRef","body","autoComplete","TextField","variant","required","placeholder","ref","type","inputProps","step","includes","Button","form","document","getElementById","checkValidity","nameField","directorField","imdbField","popularityField","select","onRowSubmit","director","imdb_score","parseFloat","popularity","reportValidity","Modal","onClose","aria-labelledby","aria-describedby","ErrorHandler","showError","error","MainHeader","onPasswordSubmit","onPasswordKeyPress","onGenreSubmit","handleClose","modalOpen","onSearch","thirdDiv","passwordField","onKeyPress","e","to","Typography","gutterBottom","getProtectedInputs","username","password","newGenre","rowInfo","changes","API_KEY","DataSource","URL","axios","get","then","response","result","sort","a","b","localeCompare","post","apiKey","record","genreIds","JSON","stringify","fields","Promise","resolve","reject","MainScreen","searchFilter","filterChanged","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","dataSource","me","all","getData","getGenres","originalData","slice","_chip","searchString","filteredData","appliedChipFilters","toLowerCase","verifyCredentials","valid","prevProps","prevState","forEach","deleteRecord","toDelete","newData","runThroughFilters","validate","mapGernesToIds","addRecord","movieId","concat","_recordId","validateChanged","updateRecord","updatedRecord","movie_name","mapIdstoGenres","some","isNaN","add","size","addGenre","currentChipFilters","push","genreId","item","gerneName","genre_ids","parse","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0aAmBMA,EAAiB,SAAC,GAAe,IAC/BC,EADkBC,EAAY,EAAZA,MAYtB,OAVKA,EAEOC,MAAMC,QAAQF,GAEfC,MAAMC,QAAQF,KACrBD,EAASC,GAFTD,EAASC,EAAMG,MAAM,MAFrBJ,EAAS,GAMDA,EAAOK,KAAI,SAAUC,EAAOC,GACpC,OAAQ,kBAACC,EAAA,EAAD,CAAMC,MAAOH,EAAOI,IAAKH,QAKzC,SAASI,EAAT,GAAgD,IAAzBV,EAAwB,EAAxBA,MAAOW,EAAiB,EAAjBA,cACrBX,EAEOC,MAAMC,QAAQF,KACtBA,EAAQA,EAAMG,MAAM,OAFpBH,EAAQ,GAIZ,IAAIY,EAAgB,IAAIC,IAAIb,GAExBD,EADOe,KACOC,MAAMhB,OACxB,OAAO,kBAACiB,EAAA,EAAD,CACHC,MAAO,kBAACC,EAAA,EAAD,MACPlB,MAAOA,EACPmB,SAAU,SAAAC,GAAK,OAAIT,EAAcS,EAAMC,OAAOrB,QAC9CsB,UAAQ,EACRC,MAAO,CAAEC,MAAO,QAChBC,YAAa,SAACC,GAAD,OAAcA,EAASC,KAAK,QAExC5B,EAAOK,KAAI,SAACC,GAAD,OACR,kBAACuB,EAAA,EAAD,CAAUnB,IAAKJ,EAAMwB,GAAI7B,MAAOK,EAAMyB,MAClC,kBAACC,EAAA,EAAD,CAAUC,QAASpB,EAAcqB,IAAI5B,EAAMyB,QAE3C,kBAACI,EAAA,EAAD,CAAcC,QAAS9B,EAAMyB,YAK7C,SAASM,EAAkBrB,GAAQ,IACzBsB,EAAStB,EAATsB,KACN,OAAQ,kBAAC,IAAD,eACJC,mBAAoBxC,EAAeyC,KAAKF,GACxCG,gBAAiB9B,EAAY6B,KAAKF,IAC9BtB,IAIZ,IAAM0B,EAAc,CAAC,UAoLNC,E,kDA/KX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTC,UAAW,GACXC,SAAS,EACTC,KAAM,GACNC,QAAS,IAGb,EAAKC,WAAa,EAAKA,WAAWT,KAAhB,gBAClB,EAAKU,aAAe,EAAKA,aAAaV,KAAlB,gBACpB,EAAKW,WAAa,EAAKA,WAAWX,KAAhB,gBAClB,EAAKY,QAAU,EAAKA,QAAQZ,KAAb,gBACf,EAAKS,WAAa,EAAKA,WAAWT,KAAhB,gBAClB,EAAKU,aAAe,EAAKA,aAAaV,KAAlB,gBACpB,EAAKa,iBAAmB,EAAKA,iBAAiBb,KAAtB,gBACxB,EAAKc,WAAa,EAAKA,WAAWd,KAAhB,gBAhBH,E,qDAmBT,IAEFe,EAFC,EACuBxC,KAAKC,MAA3BwC,EADD,EACCA,QAASC,EADV,EACUA,SACyBC,GAAP,aAAsB,sCACnDC,EAAe,qCAAOC,EAAkB,qCAG5CL,EAAU,CAAC,CACPxB,KAAM,KAAM8B,MAAO,MACpB,CACC9B,KAAM,OAAQ8B,MAAO,QACtB,CACC9B,KAAM,WAAY8B,MAAO,YAC1B,CACC9B,KAAM,SAAU8B,MAAO,UACxB,CACC9B,KAAM,aAAc8B,MAAO,cAC5B,CACC9B,KAAM,aAAc8B,MAAO,eAwB/B,GAfIL,IAEAG,EAAe,kBAAC,IAAD,MACfC,EAAkB,kBAAC,IAAD,CACdE,gBAAgB,EAChBC,iBAAe,EACfC,mBAAiB,IAErBN,EAAe,kBAAC,IAAD,CACXO,gBAAiBlD,KAAKuC,WACtBY,SAhCS,SAAAC,GAAG,OAAIA,EAAIrC,IAiCpBsC,iBAjBsB,CAAC,CAC3BC,WAAY,OAAQC,gBAAgB,GACrC,CACCD,WAAY,KAAMC,gBAAgB,OAkBjCd,EAGD,GAAIC,EACIV,EAAOhC,KAAKC,MAAMuD,UAElBxB,EAAO,QALf,IAAIA,EAAOhC,KAAKC,MAAMuD,KAe1B,OACI,yBAAKC,UAAU,YACX,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CACI1B,KAAMA,EACNQ,QAASA,GAET,kBAAClB,EAAD,CACIqC,IAAKhC,EACLJ,KAAMvB,OAET2C,EACD,kBAAC,IAAD,CAAciB,eAAgB,CAAC,CAAEN,WAAY,KAAMO,UAAW,UAC9D,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAcR,iBArBP,CAAC,CACpBC,WAAY,SACZQ,iBAAiB,MAoBL,kBAAC,IAAD,CAAgBC,qBAAmB,IAClCnB,EACAC,O,mCASRmB,GACThE,KAAKiE,SAAS,CACVnC,UAAWkC,M,iCAGRjC,GACP/B,KAAKiE,SAAS,CACVlC,c,8BAGAC,GACJhC,KAAKiE,SAAS,CACVjC,W,iCAGGC,GACPjC,KAAKiE,SAAS,CACVhC,QAASA,M,iCAINiC,GACP,GAAIA,EAAQC,QACR,IAAK,IAAI3E,EAAQ,EAAGA,EAAQ0E,EAAQC,QAAQC,OAAQ5E,IAAS,CACzD,IAAI6E,EAAYH,EAAQC,QAAQ3E,GAChC0E,EAAQC,QAAQ3E,GAASQ,KAAKC,MAAMuD,KAAKa,GAAWtD,GAG5D,GAAImD,EAAQI,QAAS,CAEjB,IADA,IAAIhF,EAAM,GACV,MAAuBiF,OAAOC,KAAKN,EAAQI,SAA3C,eAAqD,CAAhD,IAAIG,EAAU,KACXJ,EAAYK,SAASD,GACrBE,EAAW3E,KAAKC,MAAMuD,KAAKa,GAAWtD,QACN6D,IAAhCV,EAAQI,QAAQG,KAChBnF,EAAIqF,GAAYT,EAAQI,QAAQG,IAGxCP,EAAQI,QAAUhF,EAEtBU,KAAKC,MAAMsC,WAAW2B,K,yCAGN,IACV7B,EAAYrC,KAAZqC,QACAL,EAAShC,KAAK6B,MAAdG,KAwBN,OAvBsB,SAAC,GAAiC,IAGhD6C,EAHiBC,EAA8B,EAA9BA,MAAOR,EAAuB,EAAvBA,QAASH,EAAc,EAAdA,QAIrC,GAAIW,EAAO,CACP,IAAMC,EAAkB/C,EAAKoC,OAAS,EAAIpC,EAAKA,EAAKoC,OAAS,GAAGrD,GAAK,EAAI,EACzE8D,EAAW,sBACJ7C,GADI,YAEJ8C,EAAMxF,KAAI,SAAC8D,EAAK5D,GAAN,oBACTuB,GAAIgE,EAAkBvF,GACnB4D,QAOf,GAHIkB,IACAO,EAAc7C,EAAK1C,KAAI,SAAA8D,GAAG,OAAKkB,EAAQlB,EAAIrC,IAAZ,2BAAuBqC,GAAQkB,EAAQlB,EAAIrC,KAAQqC,MAElFe,EAAS,CACT,IAAMa,EAAa,IAAIjF,IAAIoE,GAC3BU,EAAc7C,EAAKiD,QAAO,SAAA7B,GAAG,OAAK4B,EAAW7D,IAAIiC,EAAIrC,OAEzDsB,EAAQwC,Q,GA3KGK,IAAMC,W,SCnEvBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACLC,QAAS,OACTC,eAAgB,SAChBC,SAAU,OACVC,UAAW,OACXC,QAASN,EAAMO,QAAQ,IACvBC,OAAQ,GAETC,KAAM,CACLD,OAAQR,EAAMO,QAAQ,SAIT,SAASG,EAAW/F,GAClC,IAAMgG,EAAUb,IAEVc,EAAcjG,EAAMkG,aAK1B,OACC,kBAACzC,EAAA,EAAD,CAAO0C,UAAU,KAAK3C,UAAWwC,EAAQV,MACvCW,EAAY5G,KAAI,SAAC+G,GACjB,OACC,wBAAI1G,IAAK0G,EAAW1G,KACnB,kBAACF,EAAA,EAAD,CACCC,MAAO2G,EAAWnH,MAClBuE,UAAWwC,EAAQF,KACnBO,SAZeP,EAYMM,EAZG,WAC7BE,QAAQC,IAAIT,GACZ9F,EAAMwG,YAAYV,KAWbW,MAAOL,EAAWM,QAAU,UAAY,eAb1B,IAACZ,M,uCCZtB,SAASa,IAIL,MAAO,CACHC,IAAI,GAAD,OAJK,GAIL,KACHC,KAAK,GAAD,OAJK,GAIL,KACJC,UAAU,cAAD,OAND,GAMC,eALA,GAKA,OAIjB,IAAM3B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrC0B,MAAO,CACHC,SAAU,WACVvG,MAAO,IACPwG,gBAAiB5B,EAAM6B,QAAQC,WAAWJ,MAC1CK,OAAQ,iBACRC,UAAWhC,EAAMiC,QAAQ,GACzB3B,QAASN,EAAMO,QAAQ,EAAG,EAAG,QAItB,SAAS2B,EAAYvH,GAChC,IAAMgG,EAAUb,IADuB,EAGlBF,IAAMuC,SAASb,GAA7Bc,EAHgC,sBAIfxC,IAAMuC,UAAS,GAJA,mBAIhCE,EAJgC,KAI1BC,EAJ0B,OAKP1C,IAAMuC,SAAS,IALR,mBAKhC7G,EALgC,KAKtBiH,EALsB,KAOjCC,EAAe5C,IAAM6C,YACrBC,EAAmB9C,IAAM6C,YACzBE,EAAe/C,IAAM6C,YACrBG,EAAqBhD,IAAM6C,YAC3BI,EAAYjD,IAAM6C,YA2BxB,IAaI9I,EADmBgB,EAAjBkG,aACoB7G,KAAI,SAAA2F,GAAM,OAAIA,EAAO/F,SAEzCkJ,EACF,yBAAK3H,MAAOiH,EAAYjE,UAAWwC,EAAQe,OACvC,wBAAIjG,GAAG,sBAAP,WACA,0BAAM0C,UAAWwC,EAAQV,KAAM8C,aAAa,MAAMtH,GAAG,YACjD,kBAACuH,EAAA,EAAD,CAAWvH,GAAG,gBAAgBrB,MAAM,OAAO6I,QAAQ,WAAWC,UAAQ,EAACC,YAAY,OAAOC,IAAKZ,IAC/F,6BACA,6BACA,kBAACQ,EAAA,EAAD,CAAWvH,GAAG,oBAAoBrB,MAAM,WAAW6I,QAAQ,WAAWC,UAAQ,EAACC,YAAY,WAAWC,IAAKV,IAC3G,6BACA,6BACA,kBAACM,EAAA,EAAD,CAAWvH,GAAG,sBAAsBrB,MAAM,aAAa6I,QAAQ,WAAWC,UAAQ,EAACC,YAAY,aAAaE,KAAK,SAASD,IAAKT,EAAcW,WAAY,CAACC,KAAK,SAC/J,6BACA,6BACA,kBAACP,EAAA,EAAD,CAAWvH,GAAG,sBAAsBrB,MAAM,aAAa6I,QAAQ,WAAWC,UAAQ,EAACC,YAAY,aAAaE,KAAK,SAASD,IAAKR,IAC/H,6BACA,6BACA,kBAAChI,EAAA,EAAD,CAAQM,UAAU,EAAMtB,MAAO0B,EAAUlB,MAAM,QAAQS,MAAO,kBAACC,EAAA,EAAD,CAAOW,GAAG,oBACpEwH,QAAQ,WAAWC,UAAQ,EAACC,YAAY,QAAQ9H,YAAa,SAACC,GAAD,OAAcA,EAASC,KAAK,OACzFR,SAzBC,SAAAC,GACbuH,EAAYvH,EAAMC,OAAOrB,QAwBOwJ,IAAKP,GAExBlJ,EAAOK,KAAI,SAACC,GACT,OAAO,kBAACuB,EAAA,EAAD,CAAUnB,IAAKJ,EAAOL,MAAOK,GAChC,kBAAC0B,EAAA,EAAD,CAAUC,QAASN,EAASkI,SAASvJ,KACpCA,OAIb,6BACA,6BACA,kBAACwJ,EAAA,EAAD,CAAQJ,KAAK,SAASJ,QAAQ,YAAY7B,MAAM,UAAUJ,QArEtE,WACI,IAAI0C,EAAOC,SAASC,eAAe,YACnC,GAAKF,EAAKG,gBAEH,CAEH,IAAIC,EAAYH,SAASC,eAAe,iBACpCG,EAAgBJ,SAASC,eAAe,qBACxCI,EAAYL,SAASC,eAAe,uBACpCK,EAAkBN,SAASC,eAAe,uBAC1CM,EAASP,SAASC,eAAe,mBAErCjJ,EAAMwJ,YAAY,CACdzI,KAAMoI,EAAUlK,MAChBwK,SAAUL,EAAcnK,MACxByK,WAAYC,WAAWN,EAAUpK,OACjC2K,WAAYD,WAAWL,EAAgBrK,OACvCD,OAAQuK,EAAOtK,MAAMG,MAAM,OAG/BuI,GAAQ,QAjBRoB,EAAKc,mBAkED,SAKZ,OACI,6BACI,kBAACf,EAAA,EAAD,CAAQzC,QAnDG,WACfsB,GAAQ,IAkDyBlB,MAAM,UAAU6B,QAAQ,aAArD,cAGA,kBAACwB,EAAA,EAAD,CACIpC,KAAMA,EACNqC,QApDQ,WAChBpC,GAAQ,IAoDAqC,kBAAgB,qBAChBC,mBAAiB,4BAEhB9B,ICnIjB,IAKe+B,EALI,CACfC,UAAW,SAASC,GAChB9D,QAAQC,IAAI6D,KCuHLC,E,kDA3GX,WAAYrK,GAAQ,IAAD,8BACf,cAAMA,IACDsK,iBAAmB,EAAKA,iBAAiB9I,KAAtB,gBACxB,EAAK+I,mBAAqB,EAAKA,mBAAmB/I,KAAxB,gBAC1B,EAAKgJ,cAAgB,EAAKA,cAAchJ,KAAnB,gBACrB,EAAKgI,YAAc,EAAKA,YAAYhI,KAAjB,gBACnB,EAAKiJ,YAAc,EAAKA,YAAYjJ,KAAjB,gBAEnB,EAAKI,MAAQ,CACT8I,WAAW,GATA,E,qDAaT,IAAD,OACCC,EAAa5K,KAAKC,MAAlB2K,SACAnI,EAAYzC,KAAKC,MAAjBwC,QACazC,KAAKC,MAAlByC,SACN,GAAID,EACA,IAAIoI,EAAW,yBAAK9J,GAAG,qBAEnB+J,EAAgB,oCAChB,kBAACxC,EAAA,EAAD,CAAWK,KAAK,OAAO5H,GAAG,iBAAiB0H,YAAY,aADvC,YAGhB,kBAACH,EAAA,EAAD,CAAWK,KAAK,WAAW5H,GAAG,iBAAiB0H,YAAY,WAAWsC,WAAY,SAACC,GAAD,OAAO,EAAKR,mBAAmBQ,MAHjG,sBAKhB,kBAACjC,EAAA,EAAD,CAAQrC,MAAM,UAAU6B,QAAQ,YAAYjC,QAAStG,KAAKuK,kBAA1D,YAGAM,EAAW,yBAAK9J,GAAG,oBACnB,kBAACgI,EAAA,EAAD,CAAQrC,MAAM,UAAU6B,QAAQ,aAAY,kBAAC,IAAD,CAAM0C,GAAG,UAAT,iBAE5CH,EAAgB,8BAGxB,OACI,yBAAKrH,UAAU,eACX,yBAAKA,UAAU,WACX,8BACA,6BAAK,kBAACyH,EAAA,EAAD,CAAY3C,QAAQ,KAAK4C,cAAY,GAArC,oBACJN,GAEL,6BACKC,GAEL,6BACA,kBAACxC,EAAA,EAAD,CAAWK,KAAK,OAAO5H,GAAG,eAAeV,SAAU,SAAC2K,EAAGxH,GAAWoH,EAASI,EAAGA,EAAEzK,OAAOrB,MAAQ,KAC3FuJ,YAAY,cAEhB,kBAACzC,EAAD,CAAYS,YAAazG,KAAKC,MAAMwG,YAAaN,aAAcnG,KAAKC,MAAMkG,eACzEnG,KAAKoL,wB,yCAMd,IAAIC,EAAWpC,SAASC,eAAe,kBAAkBhK,MACrDoM,EAAWrC,SAASC,eAAe,kBAAkBhK,MACzDc,KAAKC,MAAMsK,iBAAiBc,EAAUC,K,sCAItC,IACIC,EADatC,SAASC,eAAe,eACfhK,MACtBqM,EAASnH,OAAS,EAClBpE,KAAKC,MAAMwK,cAAcc,GAEzBpB,EAAaC,UAAU,2B,yCAIZY,GACD,UAAVA,EAAErL,KACFK,KAAKuK,qB,2CAIS,IAAD,EACgBvK,KAAKC,MAAhCyC,EADW,EACXA,SAAUyD,EADC,EACDA,aAChB,OAAIzD,EACO,oCACH,6BACA,kBAAC4F,EAAA,EAAD,CAAWK,KAAK,OAAOF,YAAY,YAAYG,WAAY,CAAC7H,GAAI,iBAF7D,sBAIH,kBAACgI,EAAA,EAAD,CAAQrC,MAAM,UAAU6B,QAAQ,YAAYjC,QAAStG,KAAKyK,eAA1D,aAJG,sBAMH,6BACA,6BACA,kBAAC,EAAD,CAAUtE,aAAcA,EAAcsD,YAAazJ,KAAKyJ,eAGrD,uC,kCAGH+B,GACRjF,QAAQC,IAAI,iBACZD,QAAQC,IAAIgF,GACZ,IAAIC,EAAU,CACV3G,MAAO,CAAC0G,IAEZxL,KAAKC,MAAMsC,WAAWkJ,K,oCAGtBzL,KAAKiE,SAAS,CACV0G,WAAW,Q,GAzGEzF,IAAMC,W,iBCZlBuG,EAAU,uCCgHRC,E,WA5GX,aAAe,oBAKX3L,KAAK4L,IAAM,iC,sDAEL,IAgBEA,EAAQ5L,KAAR4L,IACR,OAAOC,IAAMC,IAAN,UAAaF,EAAb,WAA2B,IAAIG,MAAK,SAAAC,GAAQ,OAAIA,EAASxI,U,kCAGvD,IAEDoI,EAAQ5L,KAAR4L,IACR,OAAOC,IAAMC,IAAN,UAAaF,EAAb,WAA2B,IAAIG,MAAK,SAAAE,GAEvC,OADAA,EAAOzI,KAAK0I,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnL,KAAKqL,cAAcD,EAAEpL,SAC3CiL,EAAOzI,U,mCAGTmB,GAAW,IACZiH,EAAQ5L,KAAR4L,IACR,OAAOC,IAAMS,KAAN,UAAcV,EAAd,WAA4B,CAC/BW,OAAQb,EACR3K,GAAI4D,IACLoH,MAAK,SAAAE,GAAM,OAAIA,EAAOzI,U,gCAEnBgJ,GAAS,IACPZ,EAAQ5L,KAAR4L,IAOR,OAJIzM,MAAMC,QAAQoN,EAAOC,YACrBD,EAAOC,SAAWC,KAAKC,UAAUH,EAAOC,WAE5CD,EAAOD,OAASb,EACTG,IAAMS,KAAN,UAAcV,EAAd,QAAyBY,GAAQT,MAAK,SAAAC,GAAQ,OAAIA,EAASxI,U,mCAEzDmB,EAAUiI,GAMnB,IAN4B,IACpBhB,EAAQ5L,KAAR4L,IAKR,MAFa,CAAC,OAAQ,aAAc,aAAc,WAAY,YAE9D,eAAsB,CAAjB,IAAIjM,EAAG,UACYiF,IAAhBgI,EAAOjN,KACPiN,EAAOjN,GANF,QAgBb,OAPAiN,EAAO7L,GAAK4D,EATC,SAWTiI,EAAOH,WACPG,EAAOH,SAAWC,KAAKC,UAAUC,EAAOH,WAE5CG,EAAOL,OAASb,EAETG,IAAMS,KAAN,UAAcV,EAAd,WAA4BgB,GAAQb,MAAK,SAAAC,GAAQ,OAAIA,EAASxI,U,2CAa9B,IAAvB6H,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAClBM,EAAQ5L,KAAR4L,IACR,OAAOC,IAAMS,KAAN,UAAcV,EAAd,gBAAiC,CACpCP,WAAUC,aACXS,MAAK,SAAUE,GACd,OAAOA,EAAOzI,U,+BAGbjE,GAAQ,IACLqM,EAAQ5L,KAAR4L,IAER,OAAKrM,GAAmB,KAAVA,EAKPsM,IAAMS,KAAN,UAAcV,EAAd,aAA8B,CACjCrM,MAAOA,EACPgN,OAAQb,IACTK,MAAK,SAAUC,GACd,OAAOA,EAASxI,QART,IAAIqJ,SAAQ,SAAUC,EAASC,GAClCA,EAAO,yC,SC2NRC,E,kDAtTX,WAAY/M,GAAQ,IAAD,uBACf,cAAMA,IAED4B,MAAQ,CACTsE,aAAc,GACd8G,aAAc,GACdzJ,KAAM,GACNd,UAAU,EACVzD,OAAQ,IARG,OAaf,EAAKwH,YAAc,EAAKA,YAAYhF,KAAjB,gBACnB,EAAKyL,cAAgB,EAAKA,cAAczL,KAAnB,gBACrB,EAAK8I,iBAAmB,EAAKA,iBAAiB9I,KAAtB,gBACxB,EAAKmJ,SCzBb,SAAkBuC,EAAMC,EAAMC,GAC1B,IAAIC,EAEJ,OAAO,WACH,IAAIC,EAAUvN,KACVwN,EAAOC,UAEPC,EAAQ,WACRJ,EAAU,KACLD,GAAWF,EAAKQ,MAAMJ,EAASC,IAGpCI,EAAUP,IAAcC,EAE5BO,aAAaP,GAEbA,EAAUQ,WAAWJ,EAAON,GAExBQ,GAAST,EAAKQ,MAAMJ,EAASC,IDOjBO,CAAS,EAAKnD,SALP,KAMvB,EAAKA,SAAW,EAAKA,SAASnJ,KAAd,gBAChB,EAAKc,WAAa,EAAKA,WAAWd,KAAhB,gBAClB,EAAKgJ,cAAgB,EAAKA,cAAchJ,KAAnB,gBAnBN,E,gEAsBf,IAAIuM,EAAa,IAAIrC,EACjBsC,EAAKjO,KACT6M,QAAQqB,IAAI,CAACF,EAAWG,UAAWH,EAAWI,cAAcrC,MAAK,YAAqB,IAAD,mBAAlBvI,EAAkB,KAAZvE,EAAY,KACjFgP,EAAGI,aAAe7K,EAAK8K,QACvBL,EAAGhK,SAAS,CACRT,KAAMA,EACN2C,aAAclH,EAAOK,KAAI,SAACC,GACtB,MAAO,CACHL,MAAOK,EAAMyB,KAAM2F,SAAS,EAAOhH,IAAKJ,EAAMwB,OAGtD9B,gB,+BAKR,OAAO,yBAAKwE,UAAU,eAClB,kBAAC,EAAD,CAAYgD,YAAazG,KAAKyG,YAC1BN,aAAcnG,KAAK6B,MAAMsE,aAAcyE,SAAU5K,KAAK4K,SAAUnI,QAASzC,KAAKC,MAAMwC,QACpF8H,iBAAkBvK,KAAKuK,iBAAkB7H,SAAU1C,KAAK6B,MAAMa,SAAUH,WAAYvC,KAAKuC,WACzFkI,cAAezK,KAAKyK,gBAExB,kBAAC,EAAD,CAAUjH,KAAMxD,KAAK6B,MAAM2B,KAAMf,QAASzC,KAAKC,MAAMwC,QAASC,SAAU1C,KAAK6B,MAAMa,SAC/EzD,OAAQe,KAAK6B,MAAM5C,OAAQsD,WAAYvC,KAAKuC,gB,kCAI5CwD,GAER,IAFc,EAEVI,EAAenG,KAAK6B,MAAMsE,aAAamI,QAF7B,cAGInI,GAHJ,IAGd,2BAAgC,CAAC,IAAxBoI,EAAuB,QAC5B,GAAIA,EAAMrP,QAAU6G,EAAK7G,MAAO,CAC5BqP,EAAM5H,SAAW4H,EAAM5H,QACvB,QANM,8BASd3G,KAAKiE,SAAS,CACVkC,mB,+BAIC7F,EAAOkD,GAEZ,IAAIgL,EAAehL,EACnBxD,KAAKiE,SAAS,CACVgJ,aAAcuB,M,sCAKlB,IAAIC,EAAezO,KAAKqO,aAAaC,QADzB,EAEyBtO,KAAK6B,MAApCoL,EAFM,EAENA,aACFyB,EAHQ,EAEQvI,aACkBlB,QAAO,SAAAA,GAAM,OAAIA,EAAO0B,WAE9D8H,EAAeA,EAAaxJ,QAAO,SAAAuH,GAC/B,OAAOA,EAAOxL,KAAK2N,cAAc7F,SAASmE,EAAa0B,gBACnDnC,EAAO9C,SAASiF,cAAc7F,SAASmE,EAAa0B,kBAExDD,EAAmBtK,OAAS,IAC5BqK,EAAeA,EAAaxJ,QAAO,SAAAuH,GAAW,IAAD,gBAClBkC,GADkB,IACzC,2BAA2C,CAAC,IAAnCrI,EAAkC,QACvC,IAAKmG,EAAOvN,OAAO6J,SAASzC,EAAWnH,OACnC,OAAO,GAH0B,8BAMzC,OAAO,MAGfc,KAAKiE,SAAS,CACVT,KAAMiL,M,uCAGGpD,EAAUC,GAAW,IAAD,OACjC/E,QAAQC,IAAI,aAAe6E,EAAW,cAAgBC,IACrC,IAAIK,GACViD,kBAAkB,CACzBvD,WAAUC,aACXS,MAAK,YAAe,EAAZ8C,OAEH,EAAK5K,SAAS,CACVvB,UAAU,S,yCAKPoM,EAAWC,GACtBA,EAAU9B,eAAiBjN,KAAK6B,MAAMoL,cAAgB8B,EAAU5I,eAAiBnG,KAAK6B,MAAMsE,cAC5FnG,KAAKkN,kB,iCAGFzB,GAAU,IAAD,OACV3G,EAA4B2G,EAA5B3G,MAAOR,EAAqBmH,EAArBnH,QAASH,EAAYsH,EAAZtH,QACtBoC,QAAQC,IAAIiF,GACZ,IAAIuC,EAAa,IAAIrC,EACrB,GAAIxH,GAAWhF,MAAMC,QAAQ+E,IAAYA,EAAQC,OAAS,EAAG,CACzDD,EAAQ6K,SAAQ,SAAArK,GACZqJ,EAAWiB,aAAatK,MAE5B,IAAIuK,EAAW,IAAInP,IAAIoE,GACnBgL,EAAUnP,KAAKqO,aAAapJ,QAAO,SAAAuH,GAAM,OAAK0C,EAAS/N,IAAIqL,EAAOzL,OACtEf,KAAKqO,aAAec,EAAQb,QAC5Ba,EAAUnP,KAAKoP,kBAAkBD,GACjCnP,KAAKiE,SAAS,CACVT,KAAM2L,IAEV5I,QAAQC,IAAR,+BAAoCkG,KAAKC,UAAUxI,KAEvD,GAAIW,EAAO,CAAC,IAAD,gBACYA,GADZ,IACP,2BAA0B,CAAC,IAAlB0H,EAAiB,QACRxM,KAAKqP,SAAS7C,IAExBxM,KAAKsP,eAAe9C,GACpBwB,EAAWuB,UAAU/C,GAAQT,MAAK,YAAyB,IAAtByD,EAAqB,EAArBA,QAC7BzO,GADkD,EAAZ+D,MACjC0K,GACThD,EAAOzL,GAAKA,EACZ,IAAIoO,EAAU,EAAKd,aAAaoB,OAAOjD,GACvC,EAAK6B,aAAec,EAAQb,QAC5Ba,EAAU,EAAKC,kBAAkBD,GAGjC,EAAKlL,SAAS,CACVT,KAAM2L,IAEV5I,QAAQC,IAAR,4BAAiCzF,QAGrCwF,QAAQC,IAAI,YAnBb,+BAuBX,GAAIlC,EACA,IADU,IAAD,aACAoL,EAAS,KACd,IAAI/K,EAAWD,SAASgL,GACpBlD,EAASlI,EAAQK,GACP,EAAKgL,gBAAgBnD,IAE/B,EAAK8C,eAAe9C,GACpBwB,EAAW4B,aAAajL,EAAU6H,GAAQT,MAAK,SAAC8D,GAE5CA,EAAc7O,KAAO6O,EAAcC,kBAC5BD,EAAcC,WACrB,EAAKC,eAAeF,GAEpB,IADA,IAAIV,EAAU,EAAKd,aAAaC,QACvB9O,EAAQ,EAAGA,EAAQ,EAAK6O,aAAajK,OAAQ5E,IAAS,CAC3D,IAAIgN,EAAS,EAAK6B,aAAa7O,GAC/B,GAAImF,IAAa6H,EAAOzL,GAAI,CACxBoO,EAAQ3P,GAASqQ,EACjB,OAGR,EAAKxB,aAAec,EAAQb,QAC5Ba,EAAU,EAAKC,kBAAkBD,GACjC,EAAKlL,SAAS,CACVT,KAAM2L,IAEV5I,QAAQC,IAAR,8BAAmC7B,QAGvC4B,QAAQC,IAAI,YA3BpB,MAAsBjC,OAAOC,KAAKF,GAAlC,eAA4C,CAAC,IAApCoL,EAAmC,O,+BAgC3ClD,GAGL,OAFgB,CAAC,OAAQ,WAAY,SAAU,aAAc,cAEjDwD,MAAK,SAAA1M,GAAU,YAA2BsB,IAAvB4H,EAAOlJ,WAIjCnE,MAAMC,QAAQoN,EAAOvN,SAAoC,IAAzBuN,EAAOvN,OAAOmF,WAI/C6L,MAAMrG,WAAW4C,EAAO3C,eAGxBoG,MAAMrG,WAAW4C,EAAO7C,iB,sCAKhB6C,GACZ,QAAoB5H,IAAhB4H,EAAOxL,MACa,KAAhBwL,EAAOxL,KACP,OAAO,EAGf,QAAwB4D,IAApB4H,EAAO9C,UACiB,KAApB8C,EAAO9C,SACP,OAAO,EAGf,QAAsB9E,IAAlB4H,EAAOvN,UACFE,MAAMC,QAAQoN,EAAOvN,SAAoC,IAAzBuN,EAAOvN,OAAOmF,QAC/C,OAAO,EAGf,QAA0BQ,IAAtB4H,EAAO3C,WAA0B,CACjC,GAA0B,KAAtB2C,EAAO3C,WACP,OAAO,EAEX,GAAIoG,MAAMrG,WAAW4C,EAAO3C,aACxB,OAAO,EAGf,QAA0BjF,IAAtB4H,EAAO7C,WAA0B,CACjC,GAA0B,KAAtB6C,EAAO7C,WACP,OAAO,EAEX,GAAIsG,MAAMrG,WAAW4C,EAAO7C,aACxB,OAAO,EAGf,OAAO,I,wCAEOnG,GACT,YAAOA,GAAZ,IADoB,EAEiBxD,KAAK6B,MAApCsE,EAFc,EAEdA,aAAc8G,EAFA,EAEAA,aAChByB,EAAqB,IAAI3O,IAiB7B,OAfAoG,EAAa6I,SAAQ,SAAA/J,GACbA,EAAO0B,SACP+H,EAAmBwB,IAAIjL,EAAO/F,UAGlCwP,EAAmByB,KAAO,IAC1B3M,EAAOA,EAAKyB,QAAO,SAAAuH,GACf,OAAIrN,MAAMC,QAAQoN,EAAOjN,OACdiN,EAAOjN,MAAMyQ,MAAK,SAAAzQ,GAAK,OAAImP,EAAmBvN,IAAI5B,MAElDiN,EAAOvN,OAAO+Q,MAAK,SAAAzQ,GAAK,OAAImP,EAAmBvN,IAAI5B,UAItEiE,EAAOA,EAAKyB,QAAO,SAAAuH,GAAM,OAAIA,EAAOxL,KAAK8H,SAASmE,IAAiBT,EAAO9C,SAASZ,SAASmE,Q,oCAIlF1B,GAAW,IAAD,SAChByC,EAAa,IAAIrC,EACjBsC,EAAKjO,KAFW,cAGGA,KAAK6B,MAAMsE,cAHd,IAGpB,2BAAgD,CAC5C,GAD4C,QAC7BjH,QAAUqM,EAErB,YADApB,EAAaC,UAAU,yBALX,8BASpB4D,EAAWoC,SAAS7E,GAAUQ,MAAK,SAAAE,GAC/B1F,QAAQC,IAAIyF,GACZ,IAAIoE,EAAqB,EAAKxO,MAAMsE,aAAamI,QACjD+B,EAAmBC,KAAK,CACpB3J,SAAS,EACTzH,MAAOqM,EACP5L,IAAKsM,EAAOsE,UAEhBtC,EAAGhK,SAAS,CACRkC,aAAckK,S,qCAIX7D,GACX,IADmB,EACflN,EAAM,GADS,cAEFU,KAAK6B,MAAMsE,cAFT,IAEnB,2BAA0C,CAAC,IAAlCqK,EAAiC,QAChCtR,EAAesR,EAAftR,MACF6B,EADiByP,EAAR7Q,IAEbL,EAAIJ,GAAS6B,GALE,8BAOfyL,EAAOvN,SACPuN,EAAOC,SAAWD,EAAOvN,OAAOK,KAAI,SAAAmR,GAAS,OAAInR,EAAImR,S,qCAI9CjE,GACX,IADmB,EACflN,EAAM,GADS,cAEFU,KAAK6B,MAAMsE,cAFT,IAEnB,2BAA0C,CAAC,IAAlCqK,EAAiC,QAChCtR,EAAesR,EAAftR,MAAOS,EAAQ6Q,EAAR7Q,IAEbL,EADSK,GACCT,GALK,8BAOfsN,EAAOkE,YACPlE,EAAOkE,UAAYhE,KAAKiE,MAAMnE,EAAOkE,WACrClE,EAAOvN,OAASuN,EAAOkE,UAAUpR,KAAI,SAAAiR,GAAO,OAAIjR,EAAIiR,W,GAjTvCrL,IAAMC,WEwBhByL,MAtBf,WACC,OACC,yBAAKnN,UAAU,OACd,kBAAC,IAAD,KACC,6BAGC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOoN,KAAK,UACX,kBAAC,EAAD,CAAYpO,SAAS,KAEtB,kBAAC,IAAD,CAAOoO,KAAK,KACX,kBAAC,EAAD,CAAYpO,SAAS,UCVRqO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpI,SAASC,eAAe,SDyHpB,kBAAmBoI,WACrBA,UAAUC,cAAcC,MACrBzF,MAAK,SAAA0F,GACJA,EAAaC,gBAEdC,OAAM,SAAAtH,GACL9D,QAAQ8D,MAAMA,EAAMuH,c","file":"static/js/main.b2f3de8e.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    Grid, Table, TableHeaderRow, TableEditRow,\n    TableEditColumn\n} from '@devexpress/dx-react-grid-material-ui';\nimport { EditingState } from '@devexpress/dx-react-grid';\nimport { IntegratedSorting, SortingState } from '@devexpress/dx-react-grid';\nimport { VirtualTable } from '@devexpress/dx-react-grid-material-ui';\nimport Chip from '@material-ui/core/Chip';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n    DataTypeProvider\n} from '@devexpress/dx-react-grid';\n\nconst GenreFormatter = ({ value }) => {\n    var genres;\n    if (!value) {\n        genres = [];\n    } else if (!Array.isArray(value)) {\n        genres = value.split(', ');\n    } else if (Array.isArray(value)) {\n        genres = value;\n    }\n    var chips = genres.map(function (genre, index) {\n        return (<Chip label={genre} key={index} />);\n    });\n    return chips;\n};\n\nfunction GenreEditor({ value, onValueChange }) {\n    if (!value) {\n        value = [];\n    } else if (!Array.isArray(value)) {\n        value = value.split(', ');\n    }\n    var currentGenres = new Set(value);\n    var grid = this;\n    var genres = grid.props.genres;\n    return <Select\n        input={<Input />}\n        value={value}\n        onChange={event => onValueChange(event.target.value)}\n        multiple\n        style={{ width: '100%' }}\n        renderValue={(selected) => selected.join(', ')}\n    >\n        {genres.map((genre) => (\n            <MenuItem key={genre.id} value={genre.name}>\n                <Checkbox checked={currentGenres.has(genre.name)} />\n                {/* <Checkbox checked={personName.indexOf(name) > -1} /> */}\n                <ListItemText primary={genre.name} />\n            </MenuItem>\n        ))}\n    </Select>;\n};\nfunction GenreTypeProvider(props) {\n    var { grid } = props;\n    return (<DataTypeProvider\n        formatterComponent={GenreFormatter.bind(grid)}\n        editorComponent={GenreEditor.bind(grid)}\n        {...props}\n    />);\n};\n\nconst chipColumns = ['genres'];\n\n\nclass MainGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastQuery: '',\n            loading: false,\n            rows: [],\n            filters: []\n        };\n\n        this.setLoading = this.setLoading.bind(this);\n        this.setLastQuery = this.setLastQuery.bind(this);\n        this.setFilters = this.setFilters.bind(this);\n        this.setRows = this.setRows.bind(this);\n        this.setLoading = this.setLoading.bind(this);\n        this.setLastQuery = this.setLastQuery.bind(this);\n        this.getCommitChanges = this.getCommitChanges.bind(this);\n        this.onDataEdit = this.onDataEdit.bind(this);\n    }\n\n    render() {\n        let { isAdmin, verified } = this.props;\n        let columns, editingComponents = <></>, editingState = <></>;\n        let tableEditRow = <></>, tableEditColumn = <></>;\n        const getRowId = row => row.id;\n\n        columns = [{\n            name: 'id', title: 'ID'\n        }, {\n            name: 'name', title: 'Name'\n        }, {\n            name: 'director', title: 'Director'\n        }, {\n            name: 'genres', title: 'Genres'\n        }, {\n            name: 'imdb_score', title: 'IMDB Score'\n        }, {\n            name: 'popularity', title: 'Popularity'\n        }];\n\n        let editingColumnExtensions = [{\n            columnName: 'name', editingEnabled: false\n        }, {\n            columnName: 'id', editingEnabled: false\n        }];\n\n        if (isAdmin) {\n\n            tableEditRow = <TableEditRow />;\n            tableEditColumn = <TableEditColumn\n                showAddCommand={false}\n                showEditCommand\n                showDeleteCommand\n            />;\n            editingState = <EditingState\n                onCommitChanges={this.onDataEdit}\n                getRowId={getRowId}\n                columnExtensions={editingColumnExtensions}\n            />;\n        }\n\n        if (!isAdmin) {\n            var rows = this.props.data;\n        } else {\n            if (verified) {\n                var rows = this.props.data;\n            } else {\n                var rows = [];\n            }\n        }\n\n        var columnExtensions = [{\n            columnName: 'genres',\n            wordWrapEnabled: true\n        }];\n\n\n        return (\n            <div className=\"datagrid\">\n                <Paper>\n                    <Grid\n                        rows={rows}\n                        columns={columns}\n                    >\n                        <GenreTypeProvider\n                            for={chipColumns}\n                            grid={this}\n                        />\n                        {editingState}\n                        <SortingState defaultSorting={[{ columnName: 'id', direction: 'asc' }]} />\n                        <IntegratedSorting />\n                        <Table />\n                        <VirtualTable columnExtensions={columnExtensions} />\n                        <TableHeaderRow showSortingControls />\n                        {tableEditRow}\n                        {tableEditColumn}\n                    </Grid>\n                </Paper>\n            </div>\n        );\n    }\n\n\n\n    setLastQuery(query) {\n        this.setState({\n            lastQuery: query\n        });\n    }\n    setLoading(loading) {\n        this.setState({\n            loading\n        });\n    }\n    setRows(rows) {\n        this.setState({\n            rows\n        });\n    }\n    setFilters(filters) {\n        this.setState({\n            filters: filters\n        });\n    }\n\n    onDataEdit(actions) {\n        if (actions.deleted) {\n            for (var index = 0; index < actions.deleted.length; index++) {\n                var rowNumber = actions.deleted[index];\n                actions.deleted[index] = this.props.data[rowNumber].id;\n            }\n        }\n        if (actions.changed) {\n            let map = {};\n            for (var _rowNumber of Object.keys(actions.changed)) {\n                let rowNumber = parseInt(_rowNumber);\n                let recordId = this.props.data[rowNumber].id;\n                if (actions.changed[_rowNumber] !== undefined) {\n                    map[recordId] = actions.changed[_rowNumber];\n                }\n            }\n            actions.changed = map;\n        }\n        this.props.onDataEdit(actions);\n    }\n\n    getCommitChanges() {\n        let { setRows } = this;\n        let { rows } = this.state;\n        const commitChanges = ({ added, changed, deleted }) => {\n\n\n            let changedRows;\n            if (added) {\n                const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n                changedRows = [\n                    ...rows,\n                    ...added.map((row, index) => ({\n                        id: startingAddedId + index,\n                        ...row,\n                    })),\n                ];\n            }\n            if (changed) {\n                changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n            }\n            if (deleted) {\n                const deletedSet = new Set(deleted);\n                changedRows = rows.filter(row => !deletedSet.has(row.id));\n            }\n            setRows(changedRows);\n        };\n        return commitChanges;\n    }\n}\n\nexport default MainGrid;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Chip from '@material-ui/core/Chip';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t\tflexWrap: 'wrap',\n\t\tlistStyle: 'none',\n\t\tpadding: theme.spacing(0.5),\n\t\tmargin: 0,\n\t},\n\tchip: {\n\t\tmargin: theme.spacing(0.5),\n\t},\n}));\n\nexport default function ChipsArray(props) {\n\tconst classes = useStyles();\n\t\n\tconst chipFilters = props.chipsFilters;\n\tconst handleClick = (chip) => () => {\n\t\tconsole.log(chip);\n\t\tprops.chipClicked(chip);\n\t};\n\treturn (\n\t\t<Paper component=\"ul\" className={classes.root}>\n\t\t\t{chipFilters.map((chipFilter) => {\n\t\t\t\treturn (\n\t\t\t\t\t<li key={chipFilter.key}>\n\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\tlabel={chipFilter.value}\n\t\t\t\t\t\t\tclassName={classes.chip}\n\t\t\t\t\t\t\tonClick={handleClick(chipFilter)}\n\t\t\t\t\t\t\tcolor={chipFilter.applied ? 'primary' : 'secondary'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</Paper>\n\t);\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Select } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\n\n\nfunction getModalStyle() {\n    const top = 50;\n    const left = 50;\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function SimpleModal(props) {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n    const [selected, setSelected] = React.useState([]);\n\n    const nameFieldRef = React.createRef();\n    const directorFieldRef = React.createRef();\n    const imdbFieldRef = React.createRef();\n    const popularityFieldRef = React.createRef();\n    const selectRef = React.createRef();\n\n    function onRowSubmit() {\n        var form = document.getElementById('row-form');\n        if (!form.checkValidity()) {\n            form.reportValidity();\n        } else {\n            // console.log(nameFieldRef);\n            let nameField = document.getElementById('outlined-name');\n            let directorField = document.getElementById('outlined-director');\n            let imdbField = document.getElementById('outlined-imdb-score');\n            let popularityField = document.getElementById('outlined-popularity');\n            let select = document.getElementById('outlined-genres');\n\n            props.onRowSubmit({\n                name: nameField.value,\n                director: directorField.value,\n                imdb_score: parseFloat(imdbField.value),\n                popularity: parseFloat(popularityField.value),\n                genres: select.value.split(',')\n            });\n\n            setOpen(false);\n        }\n    }\n\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const onChange = event => {\n        setSelected(event.target.value);\n    };\n\n    var { chipsFilters } = props;\n    var genres = chipsFilters.map(filter => filter.value);\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <h2 id=\"simple-modal-title\">New Row</h2>\n            <form className={classes.root} autoComplete=\"off\" id='row-form'>\n                <TextField id=\"outlined-name\" label=\"Name\" variant=\"outlined\" required placeholder='Name' ref={nameFieldRef} />\n                <br />\n                <br />\n                <TextField id=\"outlined-director\" label=\"Director\" variant=\"outlined\" required placeholder='Director' ref={directorFieldRef}/>\n                <br />\n                <br />\n                <TextField id=\"outlined-imdb-score\" label=\"IMDB Score\" variant=\"outlined\" required placeholder='IMDB Score' type='number' ref={imdbFieldRef} inputProps={{step:'any'}}/>\n                <br />\n                <br />\n                <TextField id=\"outlined-popularity\" label=\"Popularity\" variant=\"outlined\" required placeholder='Popularity' type='number' ref={popularityFieldRef}/>\n                <br />\n                <br />\n                <Select multiple={true} value={selected} label='Genre' input={<Input id='outlined-genres'/>}\n                    variant='outlined' required placeholder='Genre' renderValue={(selected) => selected.join(', ')}\n                    onChange={onChange} ref={selectRef}>\n                   \n                    {genres.map((genre) => {\n                        return <MenuItem key={genre} value={genre}>\n                            <Checkbox checked={selected.includes(genre)} />\n                            {genre}\n                        </MenuItem>;\n                    })}\n                </Select>\n                <br />\n                <br />\n                <Button type='button' variant='contained' color='primary' onClick={onRowSubmit}>Add</Button>\n            </form>\n        </div>\n    );\n\n    return (\n        <div>\n            <Button onClick={handleOpen} color='primary' variant='contained'>\n                New Record\n            </Button>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    );\n}\n","var ErrorHandler = {\n    showError: function(error) {\n        console.log(error);\n    }\n};\nexport default ErrorHandler;","import React from 'react';\nimport ChipsArray from './ChipsArray';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport {\n    BrowserRouter as Router,\n    Link\n} from \"react-router-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport RowModal from './RowModal';\nimport ErrorHandler from './ErrorHandler';\n\nclass MainHeader extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.onPasswordSubmit = this.onPasswordSubmit.bind(this);\n        this.onPasswordKeyPress = this.onPasswordKeyPress.bind(this);\n        this.onGenreSubmit = this.onGenreSubmit.bind(this);\n        this.onRowSubmit = this.onRowSubmit.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        this.state = {\n            modalOpen: false\n        };\n    }\n\n    render() {\n        var { onSearch } = this.props;\n        var { isAdmin } = this.props;\n        var { verified } = this.props;\n        if (isAdmin) {\n            var thirdDiv = <div id='admin-button-div'></div>;\n\n            var passwordField = <>\n                <TextField type='text' id='username-input' placeholder='Username'></TextField>\n            &nbsp; &nbsp;\n                <TextField type='password' id='password-input' placeholder='Password' onKeyPress={(e) => this.onPasswordKeyPress(e)}></TextField>\n            &nbsp; &nbsp; &nbsp; &nbsp;\n                <Button color='primary' variant='contained' onClick={this.onPasswordSubmit}>Go</Button>\n            </>;\n        } else {\n            var thirdDiv = <div id='admin-button-div'>\n                <Button color='primary' variant='contained'><Link to='/admin'>Admin Panel</Link></Button>\n            </div>;\n            var passwordField = <div></div>;\n\n        }\n        return (\n            <div className='main-header'>\n                <div className='heading'>\n                    <div></div>\n                    <div><Typography variant=\"h3\" gutterBottom>Movies Database</Typography></div>\n                    {thirdDiv}\n                </div>\n                <div>\n                    {passwordField}\n                </div>\n                <br />\n                <TextField type='text' id='search-input' onChange={(e, data) => { onSearch(e, e.target.value + '') }}\n                    placeholder='Search...'\n                ></TextField>\n                <ChipsArray chipClicked={this.props.chipClicked} chipsFilters={this.props.chipsFilters}></ChipsArray>\n                {this.getProtectedInputs()}\n                {/* {modal} */}\n            </div>\n        )\n    }\n    onPasswordSubmit() {\n        var username = document.getElementById('username-input').value;\n        var password = document.getElementById('password-input').value;\n        this.props.onPasswordSubmit(username, password);\n    }\n\n    onGenreSubmit() {\n        var genreInput = document.getElementById('genre-input');\n        var newGenre = genreInput.value;\n        if (newGenre.length > 0) {\n            this.props.onGenreSubmit(newGenre);\n        } else {\n            ErrorHandler.showError('genre cannot be empty');\n        }\n    }\n\n    onPasswordKeyPress(e) {\n        if (e.key === 'Enter') {\n            this.onPasswordSubmit();\n        }\n    }\n\n    getProtectedInputs() {\n        var { verified, chipsFilters } = this.props;\n        if (verified) {\n            return <>\n                <br />\n                <TextField type='text' placeholder='Add Genre' inputProps={{id: 'genre-input'}}></TextField>\n            &nbsp; &nbsp; &nbsp; &nbsp;\n                <Button color='primary' variant='contained' onClick={this.onGenreSubmit}>Add Genre</Button>\n            &nbsp; &nbsp; &nbsp; &nbsp;\n                <br/>\n                <br/>\n                <RowModal chipsFilters={chipsFilters} onRowSubmit={this.onRowSubmit}></RowModal>\n            </>;\n        } else {\n            return <></>;\n        }\n    }\n    onRowSubmit(rowInfo) {\n        console.log('row submitted');\n        console.log(rowInfo);\n        let changes = {\n            added: [rowInfo]\n        };\n        this.props.onDataEdit(changes);\n    }\n    handleClose() {\n        this.setState({\n            modalOpen: false\n        });\n    }\n}\nexport default MainHeader;  ","export const API_KEY = 'aba102da-f581-4ff7-a350-b7b671f70e68';","import axios from 'axios';\nimport { API_KEY } from './constants';\nimport ErrorHandler from './../components/ErrorHandler';\nclass DataSource {\n    constructor() {\n        // this.URL = 'http://localhost/api';\n        // this.URL = 'http://localhost:5000';\n        // this.URL = 'http://jasonpereira.pagekite.me:3001';\n        // this.URL = 'http://jasonpereira.pagekite.me/api';\n        this.URL = 'https://fynd-app.herokuapp.com';\n    }\n    getData() {\n\n        /*\n        {\n                \"99popularity\": 83.0,\n                \"director\": \"Victor Fleming\",\n                \"genre\": [\n                    \"Adventure\",\n                    \"Family\",\n                    \"Fantasy\",\n                    \"Musical\"\n                ],\n                \"imdb_score\": 8.3,\n                \"name\": \"The Wizard of Oz\"\n            }\n        */\n        const { URL } = this;\n        return axios.get(`${URL}/movies`, {}).then(response => response.data);\n\n    }\n    getGenres() {\n\n        const { URL } = this;\n        return axios.get(`${URL}/genres`, {}).then(result => {\n            result.data.sort((a, b) => a.name.localeCompare(b.name));\n            return result.data;\n        });\n    }\n    deleteRecord(recordId) {\n        const { URL } = this;\n        return axios.post(`${URL}/delete`, {\n            apiKey: API_KEY,\n            id: recordId\n        }).then(result => result.data);\n    }\n    addRecord(record) {\n        const { URL } = this;\n        // record.imdb_score = record.imdbScore;\n        // delete record.imdbScore;\n        if (Array.isArray(record.genreIds)) {\n            record.genreIds = JSON.stringify(record.genreIds);\n        }\n        record.apiKey = API_KEY;\n        return axios.post(`${URL}/add`, record).then(response => response.data);\n    }\n    updateRecord(recordId, fields) {\n        const { URL } = this;\n        const NULL = 'NULL';\n\n        const keys = ['name', 'imdb_score', 'popularity', 'genreIds', 'director'];\n\n        for (var key of keys) {\n            if (fields[key] === undefined) {\n                fields[key] = NULL;\n            }\n        }\n        fields.id = recordId;\n\n        if (fields.genreIds !== NULL) {\n            fields.genreIds = JSON.stringify(fields.genreIds);\n        }\n        fields.apiKey = API_KEY;\n\n        return axios.post(`${URL}/update`, fields).then(response => response.data);\n\n        /*\n        99popularity: 88\n        director: \"George Lucas\"\n        genre: (4) [\"Action\", \"Adventure\", \"Fantasy\", \"Sci-Fi\"]\n        genres: \"Action, Adventure, Fantasy, Sci-Fi\"\n        id: 1\n        imdb_score: 8.8\n        name: \"Star Wars\"\n        popularity: 88\n        */\n    }\n    verifyCredentials({ username, password }) {\n        const { URL } = this;\n        return axios.post(`${URL}/credentials`, {\n            username, password\n        }).then(function (result) {\n            return result.data;\n        });\n    }\n    addGenre(genre) {\n        const { URL } = this;\n\n        if (!genre || genre === '') {\n            return new Promise(function (resolve, reject) {\n                reject('invalid genre: cannot be empty');\n            });\n        }\n        return axios.post(`${URL}/addgenre`, {\n            genre: genre,\n            apiKey: API_KEY\n        }).then(function (response) {\n            return response.data;\n        });\n    }\n}\n\nexport default DataSource;\n\n\n","import React from 'react';\nimport MainGrid from './MainGrid';\nimport MainHeader from './MainHeader';\nimport DataSource from './../data/DataSource';\nimport { debounce } from './../utils/utils';\nimport ErrorHandler from './ErrorHandler';\n\n\nclass MainScreen extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chipsFilters: [],\n            searchFilter: '',\n            data: [],\n            verified: false,\n            genres: []\n        };\n\n        const DEBOUNCE_DELAY = 400;\n\n        this.chipClicked = this.chipClicked.bind(this);\n        this.filterChanged = this.filterChanged.bind(this);\n        this.onPasswordSubmit = this.onPasswordSubmit.bind(this);\n        this.onSearch = debounce(this.onSearch, DEBOUNCE_DELAY);\n        this.onSearch = this.onSearch.bind(this);\n        this.onDataEdit = this.onDataEdit.bind(this);\n        this.onGenreSubmit = this.onGenreSubmit.bind(this);\n    }\n    componentDidMount() {\n        var dataSource = new DataSource();\n        var me = this;\n        Promise.all([dataSource.getData(), dataSource.getGenres()]).then(([data, genres]) => {\n            me.originalData = data.slice();\n            me.setState({\n                data: data,\n                chipsFilters: genres.map((genre) => {\n                    return {\n                        value: genre.name, applied: false, key: genre.id\n                    };\n                }),\n                genres\n            });\n        });\n    }\n    render() {\n        return <div className='main-screen'>\n            <MainHeader chipClicked={this.chipClicked}\n                chipsFilters={this.state.chipsFilters} onSearch={this.onSearch} isAdmin={this.props.isAdmin}\n                onPasswordSubmit={this.onPasswordSubmit} verified={this.state.verified} onDataEdit={this.onDataEdit}\n                onGenreSubmit={this.onGenreSubmit}>\n            </MainHeader>\n            <MainGrid data={this.state.data} isAdmin={this.props.isAdmin} verified={this.state.verified}\n                genres={this.state.genres} onDataEdit={this.onDataEdit}\n            ></MainGrid>\n        </div>\n    }\n    chipClicked(chip) {\n        // console.log('clickedddd');\n        var chipsFilters = this.state.chipsFilters.slice();\n        for (var _chip of chipsFilters) {\n            if (_chip.value === chip.value) {\n                _chip.applied = !_chip.applied\n                break;\n            }\n        }\n        this.setState({\n            chipsFilters\n        });\n        // this.filterChanged();\n    }\n    onSearch(event, data) {\n        // event.persist();\n        var searchString = data;\n        this.setState({\n            searchFilter: searchString\n        });\n        // this.filterChanged();\n    }\n    filterChanged() {\n        var filteredData = this.originalData.slice();\n        var { searchFilter, chipsFilters } = this.state;\n        var appliedChipFilters = chipsFilters.filter(filter => filter.applied);\n\n        filteredData = filteredData.filter(record => {\n            return record.name.toLowerCase().includes(searchFilter.toLowerCase()) ||\n                record.director.toLowerCase().includes(searchFilter.toLowerCase());\n        });\n        if (appliedChipFilters.length > 0) {\n            filteredData = filteredData.filter(record => {\n                for (var chipFilter of appliedChipFilters) {\n                    if (!record.genres.includes(chipFilter.value)) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        }\n        this.setState({\n            data: filteredData\n        });\n    }\n    onPasswordSubmit(username, password) {\n        console.log('username: ' + username + ' password: ' + password);\n        var dataSource = new DataSource();\n        dataSource.verifyCredentials({\n            username, password\n        }).then(({ valid }) => {\n            if (valid) {\n                this.setState({\n                    verified: true\n                });\n            }\n        });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.searchFilter !== this.state.searchFilter || prevState.chipsFilters !== this.state.chipsFilters) {\n            this.filterChanged();\n        }\n    }\n    onDataEdit(changes) {\n        let { added, changed, deleted } = changes;\n        console.log(changes);\n        var dataSource = new DataSource();\n        if (deleted && Array.isArray(deleted) && deleted.length > 0) {\n            deleted.forEach(recordId => {\n                dataSource.deleteRecord(recordId);\n            });\n            var toDelete = new Set(deleted);\n            let newData = this.originalData.filter(record => !toDelete.has(record.id));\n            this.originalData = newData.slice();\n            newData = this.runThroughFilters(newData);\n            this.setState({\n                data: newData\n            });\n            console.log(`record deleted: IDs: ${JSON.stringify(deleted)}`);\n        }\n        if (added) {\n            for (var record of added) {\n                var isValid = this.validate(record);\n                if (isValid) {\n                    this.mapGernesToIds(record);\n                    dataSource.addRecord(record).then(({ movieId, added }) => {\n                        var id = movieId;\n                        record.id = id;\n                        let newData = this.originalData.concat(record);\n                        this.originalData = newData.slice();\n                        newData = this.runThroughFilters(newData);\n                        // newData.sort((a,b) => b.id - a.id);\n\n                        this.setState({\n                            data: newData\n                        });\n                        console.log(`record added; ID: ${id}`);\n                    });\n                } else {\n                    console.log('invalid');\n                }\n            }\n        }\n        if (changed) {\n            for (var _recordId of Object.keys(changed)) {\n                let recordId = parseInt(_recordId);\n                var record = changed[recordId];\n                var isValid = this.validateChanged(record);\n                if (isValid) {\n                    this.mapGernesToIds(record);\n                    dataSource.updateRecord(recordId, record).then((updatedRecord) => {\n                        // delete record.genreIds;\n                        updatedRecord.name = updatedRecord.movie_name;\n                        delete updatedRecord.movie_name;\n                        this.mapIdstoGenres(updatedRecord);\n                        var newData = this.originalData.slice();\n                        for (var index = 0; index < this.originalData.length; index++) {\n                            var record = this.originalData[index];\n                            if (recordId === record.id) {\n                                newData[index] = updatedRecord;\n                                break;\n                            }\n                        }\n                        this.originalData = newData.slice();\n                        newData = this.runThroughFilters(newData);\n                        this.setState({\n                            data: newData\n                        });\n                        console.log(`record changed; ID: ${recordId}`);\n                    });\n                } else {\n                    console.log('invalid');\n                }\n            }\n        }\n    }\n    validate(record) {\n        const columns = ['name', 'director', 'genres', 'imdb_score', 'popularity'];\n\n        if (columns.some(columnName => record[columnName] === undefined)) {\n            return false;\n        }\n\n        if (!Array.isArray(record.genres) || record.genres.length === 0) {\n            return false;\n        }\n\n        if (isNaN(parseFloat(record.popularity))) {\n            return false;\n        }\n        if (isNaN(parseFloat(record.imdb_score))) {\n            return false;\n        }\n        return true;\n    }\n    validateChanged(record) {\n        if (record.name !== undefined) {\n            if (record.name === '') {\n                return false;\n            }\n        }\n        if (record.director !== undefined) {\n            if (record.director === '') {\n                return false;\n            }\n        }\n        if (record.genres !== undefined) {\n            if (!Array.isArray(record.genres) || record.genres.length === 0) {\n                return false;\n            }\n        }\n        if (record.popularity !== undefined) {\n            if (record.popularity === '') {\n                return false;\n            }\n            if (isNaN(parseFloat(record.popularity))) {\n                return false;\n            }\n        }\n        if (record.imdb_score !== undefined) {\n            if (record.imdb_score === '') {\n                return false;\n            }\n            if (isNaN(parseFloat(record.imdb_score))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    runThroughFilters(data) {\n        var d = [...data];\n        var { chipsFilters, searchFilter } = this.state;\n        var appliedChipFilters = new Set();\n\n        chipsFilters.forEach(filter => {\n            if (filter.applied) {\n                appliedChipFilters.add(filter.value);\n            }\n        });\n        if (appliedChipFilters.size > 0) {\n            data = data.filter(record => {\n                if (Array.isArray(record.genre)) {\n                    return record.genre.some(genre => appliedChipFilters.has(genre))\n                } else {\n                    return record.genres.some(genre => appliedChipFilters.has(genre))\n                }\n            });\n        }\n        data = data.filter(record => record.name.includes(searchFilter) || record.director.includes(searchFilter));\n        return data;\n    }\n\n    onGenreSubmit(newGenre) {\n        var dataSource = new DataSource();\n        var me = this;\n        for (var chipFilter of this.state.chipsFilters) {\n            if (chipFilter.value === newGenre) {\n                ErrorHandler.showError('genre already exists');\n                return;\n            }\n        }\n        dataSource.addGenre(newGenre).then(result => {\n            console.log(result);\n            var currentChipFilters = this.state.chipsFilters.slice();\n            currentChipFilters.push({\n                applied: false,\n                value: newGenre,\n                key: result.genreId\n            });\n            me.setState({\n                chipsFilters: currentChipFilters\n            });\n        });\n    }\n    mapGernesToIds(record) {\n        var map = {};\n        for (var item of this.state.chipsFilters) {\n            let { value, key } = item;\n            var id = key;\n            map[value] = id;\n        }\n        if (record.genres) {\n            record.genreIds = record.genres.map(gerneName => map[gerneName]);\n        }\n        // delete record.genres;\n    }\n    mapIdstoGenres(record) {\n        var map = {};\n        for (var item of this.state.chipsFilters) {\n            let { value, key } = item;\n            var id = key;\n            map[id] = value;\n        }\n        if (record.genre_ids) {\n            record.genre_ids = JSON.parse(record.genre_ids);\n            record.genres = record.genre_ids.map(genreId => map[genreId]);\n        }\n        // delete record.genres;\n    }\n}\n\nexport default MainScreen;","function debounce(func, wait, immediate) {\n    var timeout;\n\n    return function executedFunction() {\n        var context = this;\n        var args = arguments;\n\n        var later = function () {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n\n        var callNow = immediate && !timeout;\n\n        clearTimeout(timeout);\n\n        timeout = setTimeout(later, wait);\n\n        if (callNow) func.apply(context, args);\n    };\n};\nexport { debounce };\n\n// from https://www.educative.io/edpresso/how-to-use-the-debounce-function-in-javascript","import React from 'react';\nimport './App.css';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n} from \"react-router-dom\";\nimport MainScreen from './components/MainScreen';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<div>\n\t\t\t\t\t{/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/admin\">\n\t\t\t\t\t\t\t<MainScreen isAdmin={true}/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t<MainScreen isAdmin={false}/>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}